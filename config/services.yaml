parameters:
    configPageLimit: '%env(int:DOCUMENT_PAGE_LIMIT)%'
    env(DOCUMENT_PAGE_LIMIT): '0'

    rabbitmq_stats_url: '%env(RABBITMQ_STATS_URL)%'

    available_locales: ['en', 'nl']
    public_base_url: '%env(PUBLIC_BASE_URL)%'
    thumbnail_limit: 50

imports:
    - { resource: services/default_autowire.yaml }
    - { resource: services/woo_index.yaml }
    - { resource: services/batch_archiver.yaml }

services:
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

        bind:
            Psr\Log\LoggerInterface $logger: '@App\Service\Logging\EnrichedPsrLogger'

    App\Service\Security\ApplicationMode\ApplicationMode:
        factory: ['App\Service\Security\ApplicationMode\ApplicationMode', 'fromEnvVar']
        arguments: [ '%env(APP_MODE)%' ]

    App\Domain\Search\Index\Rollover\MappingService:
        arguments:
            $rootDir: '%kernel.project_dir%'

    Elastic\Elasticsearch\Client:
        factory: ['App\Service\Elastic\ElasticClientFactory', 'create']
        arguments:
            $host: '%env(ELASTICSEARCH_HOST)%'
            $username: '%env(ELASTICSEARCH_USER)%'
            $password: '%env(ELASTICSEARCH_PASS)%'
            $mtlsCertPath: '%env(ELASTICSEARCH_MTLS_CERT_PATH)%'
            $mtlsKeyPath: '%env(ELASTICSEARCH_MTLS_KEY_PATH)%'
            $mtlsCAPath: '%env(ELASTICSEARCH_MTLS_CA_PATH)%'

    Elastic\Elasticsearch\ClientInterface:
        alias: 'App\DataCollector\CollectorClient'

    tika.client:
        class: GuzzleHttp\Client
        factory: ['App\Domain\Ingest\Content\Extractor\Tika\TikaGuzzleClientFactory', 'create']
        arguments:
            $tikaHost: '%env(TIKA_HOST)%'

    App\Domain\Ingest\Content\Extractor\Tika\TikaService:
        $client: '@tika.client'

    App\Service\Inventory\Reader\InventoryReaderFactory:
        arguments:
            $factories:
                - '@App\Service\FileReader\ExcelCsvReaderFactory'

    App\Service\Stats\WorkerStatsService:
        arguments:
            $handlers:
                - '@App\Service\Stats\Handler\ElasticHandler'
                - '@App\Service\Stats\Handler\DoctrineHandler'

    # Public is true, because we need to inject this service in the DBAL types (see /App/Doctrine/Encrypted*.php files)
    App\Service\Encryption\EncryptionService:
        public: true
        arguments:
            $encryptionKey: '%env(DATABASE_ENCRYPTION_KEY)%'

    App\Service\Storage\EntityStorageService:
        arguments:
            $isLocal: "@=env('STORAGE_DOCUMENT_ADAPTER')=='local' ? true : false"
            $documentRoot: '%document_path%'

    # We need to create an alias to the monolog.logger service, as these services are by default private. This means
    # it is not possible to fetch these services from the container. This is normally a "good thing"(tm), but in this
    # case we need it because we cannot inject these services in the DBAL types (see /App/Doctrine/Encrypted*.php files)
    public_logger:
        alias: 'monolog.logger'
        public: true

    App\Twig\Runtime\AppExtensionRuntime:
        arguments:
            $projectPath: '%kernel.project_dir%'

    App\Domain\Publication\BatchDownload\BatchDownloadStorage:
        arguments:
            $filesystem: '@batch.storage'

    App\EventSubscriber\LocaleListener:
        arguments:
            $defaultLocale: '%kernel.default_locale%'
            $allowedLocales: '%available_locales%'

    App\EventSubscriber\ApiVersionHeaderSubscriber:
        arguments:
            $apiVersion: '%api_platform.version%'

    App\Service\Totp:
        arguments:
            $issuer: '%env(TOTP_ISSUER)%'

    App\Command\CleanSheet:
        arguments:
            $queueDsns: [
                '%env(HIGH_TRANSPORT_DSN)%',
                '%env(INGESTOR_TRANSPORT_DSN)%',
                '%env(ESUPDATER_TRANSPORT_DSN)%',
                '%env(GLOBAL_TRANSPORT_DSN)%',
            ]

    App\Controller\Public\StatsController:
        arguments:
            $redis: '@snc_redis.ingest'
            $rabbitMqStatUrl: '%rabbitmq_stats_url%'


    Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler:
        arguments:
            $redis: '@snc_redis.session'

    App\Service\Security\Session\EncryptedSessionProxy:
        arguments:
            - '@Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler'
            - '%env(APP_SECRET)%'

    App\Service\Logging\EnrichedPsrLogger:
        arguments:
            $logger: '@monolog.logger'

    Aws\S3\S3Client:
        arguments:
            - version: '2006-03-01'
              region: '%env(STORAGE_MINIO_REGION)%'
              endpoint: '%env(STORAGE_MINIO_ENDPOINT)%'
              use_path_style_endpoint: true
              credentials:
                key: '%env(STORAGE_MINIO_ACCESS_KEY)%'
                secret: '%env(STORAGE_MINIO_SECRET_KEY)%'

    App\Service\Security\Authorization\AuthorizationMatrix:
        arguments:
            $entries: '@=service("App\\Service\\Security\\Authorization\\ConfigFactory").create()'

    App\Service\Security\Authorization\ConfigFactory:
        arguments:
            $config: '%authorization_matrix%'

    App\Service\Inventory\Sanitizer\InventorySanitizer:
        arguments:
            $writer: '@App\Service\Inventory\Sanitizer\ExcelWriter'

    App\Service\Inventory\Sanitizer\InventoryDocumentMapper:
        arguments:
            $publicBaseUrl: '%env(PUBLIC_BASE_URL)%'

    App\Service\HistoryService:
        arguments:
            $translator: '@translator.default'

    extractor.7z:
        class: App\Domain\Upload\Extractor\Extractor
        public: true
        arguments:
            $archive: '@App\Domain\ArchiveExtractor\SevenZipArchive'

    App\Domain\Upload\Extractor\Extractor $sevenZipExtractor: '@extractor.7z'

    App\Domain\Upload\AntiVirus\ClamAvClientFactory:
        arguments:
            $address: '%env(CLAM_AV_ADDRESS)%'

    App\Domain\Upload\AntiVirus\ClamAvFileScanner:
        arguments:
            $fileSizeLimit: '%env(CLAM_AV_MAX_FILESIZE)%'

    App\Domain\Upload\Handler\S3\S3UploadHelper:
        arguments:
            $bucket: '%env(STORAGE_MINIO_UPLOAD_BUCKET)%'

    League\MimeTypeDetection\FinfoMimeTypeDetector:
        arguments:
            $bufferSampleSize: !php/const App\Domain\Upload\FileType\MimeTypeHelper::SAMPLE_SIZE

when@dev:
    services: &services_dev
        App\Tests\Factory\:
            autowire: true
            autoconfigure: true
            resource: '../tests/Factory'

        Faker\Generator:
            public: true
            factory: ['App\Tests\Faker\FakerFactory', 'create']

        App\Tests\Story\:
            autowire: true
            autoconfigure: true
            resource: '../tests/Story'

when@test:
    services:
        <<: *services_dev

        App\Domain\Department\Markdown\MarkdownConverter:
            public: true
