name: CI

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    tags: [ v* ]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: 20
  PHP_VERSION: 8.2

jobs:
  migration_check:
    name: Check for missing migrations
    if: ${{ github.event_name == 'pull_request' }}
    uses: minvws/nl-rdo-woo-web-private/.github/workflows/migration-check.yml@main
    secrets: inherit

  audit:
    name: Dependency Audit
    runs-on: 'ubuntu-22.04'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://npm.pkg.github.com'
      - name: 'Security Check: npm'
        run: npm audit
      - name: Install PHP
        uses: shivammathur/setup-php@master
        if: always()
        with:
          php-version: ${{ env.PHP_VERSION }}
      - name: 'Composer install'
        if: always()
        env:
          COMPOSER_AUTH: '{"github-oauth": {"github.com": "${{ secrets.REPO_READ_ONLY_TOKEN }}"}}'
        run: composer install  --no-interaction --no-scripts --no-progress --prefer-dist --no-ansi --ignore-platform-reqs
      - name: 'Security Check: composer'
        if: always()
        run: composer audit

  validate:
    name: 'Build & validate'
    runs-on: 'ubuntu-22.04'
    services:
      postgres:
        image: postgres:14.10-bookworm
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      rabbitmq:
        image: rabbitmq:3
        ports:
          - 5672:5672
        options: --health-cmd "rabbitmqctl node_health_check" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://npm.pkg.github.com'
      - name: Install npm dependencies
        run: npm ci --ignore-scripts
      - name: 'Linting: javascript'
        if: always()
        run: |
          npm run jslint:json
          sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace@g' reports/eslint.json
      - name: 'Linting: Markdown'
        uses: DavidAnson/markdownlint-cli2-action@v19
        if: always()
      - name: 'Linting: REUSE'
        uses: fsfe/reuse-action@v5
        if: always()
      - name: 'Unit tests: front-end'
        if: always()
        run: npm test
      - name: Install PHP
        uses: shivammathur/setup-php@master
        if: always()
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: zip, pgsql, pcov
      - name: 'Composer install'
        if: always()
        env:
          COMPOSER_AUTH: '{"github-oauth": {"github.com": "${{ secrets.REPO_READ_ONLY_TOKEN }}"}}'
        run: composer install  --no-interaction --no-scripts --no-progress --prefer-dist --no-ansi
      - name: Build npm
        if: always()
        run: npm run build
      - name: 'Linting: PHP CodeSniffer'
        if: always()
        run: vendor/bin/phpcs
      - name: 'Linting: PHP CS Fixer'
        if: always()
        run: vendor/bin/php-cs-fixer fix --dry-run --diff --verbose
      - name: 'Linting: PHPmd'
        if: always()
        run: vendor/bin/phpmd src/ text ruleset.phpmd.xml
      - name: Copy .env.ci to .env.local
        if: always()
        run: cp .env.ci .env.test.local
      - name: 'Linting: Twig'
        if: success()
        run: bin/console lint:twig templates
      - name: 'Linting: Translations'
        if: success()
        run: bin/console lint:yaml translations
      - name: 'Static Code Analysis: PHPStan'
        if: success()
        run: |
          set -eo pipefail
          mkdir -p reports
          vendor/bin/phpstan analyse --error-format=prettyJson | tee reports/phpstan.json
      - name: Migrate Test DB
        if: always()
        run: bin/console doctrine:schema:create --no-interaction --env=test
      - name: 'Unit tests: PHP'
        if: always()
        run: php -dpcov.enabled=1 -dpcov.directory=. vendor/bin/phpunit -d --without-creating-snapshots --log-junit=reports/report-phpunit.xml --coverage-clover=reports/coverage-phpunit.xml
      - name: Run SonarCloud scanner
        uses: minvws/nl-irealisatie-generic-pipelines/.github/actions/sonarcloud@main
        with:
          sonar-token: ${{ secrets.SONAR_TOKEN }}

  test-pr:
    name: 'Test PR suite'
    needs: validate
    if: ${{ github.event_name == 'pull_request' }}
    uses: minvws/nl-rdo-woo-web-private/.github/workflows/e2e-ci.yml@main
    secrets: inherit
    with:
      test_tag: 'pr'

  test:
    name: 'Test full suite'
    needs: validate
    if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
    uses: minvws/nl-rdo-woo-web-private/.github/workflows/e2e-ci.yml@main
    secrets: inherit
    with:
      test_tag: 'ci'

  package:
    name: Package
    needs: test
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    uses: minvws/nl-rdo-woo-web-private/.github/workflows/package.yml@main
    secrets: inherit
